'''
def coin_probability(coins, k):
    n = len(coins)
    
    # Initialize a 2D array to store probabilities
    dp = [[0.0] * (k + 1) for _ in range(n + 1)]
    
    # Base case: 0 heads with 0 coins, probability is 1.0
    dp[0][0] = 1.0
    
    # Iterate through each coin
    for i in range(1, n + 1):
        # Iterate through possible number of heads
        for j in range(k + 1):
            # Probability of getting j heads using the first i coins
            dp[i][j] = dp[i - 1][j] * (1 - coins[i - 1])  # Tails
            if j > 0:
                dp[i][j] += dp[i - 1][j - 1] * coins[i - 1]  # Heads
    
    # The final result is the probability of getting exactly k heads using all n coins
    return dp[n][k]

# Example usage:
coins = [0.5,0.5,0.5,0.5,0.66,0.66]
k = 5
result = coin_probability(coins, k)
print(f"The probability of getting exactly {k} heads is {result}")

'''
# A Python3 solution for longest palindrome
 
 
# Function to print a subString str[low..high]
def printSubStr(str, low, high):
    for i in range(low, high + 1):
        print(str[i], end="")
 
 
# This function prints the
# longest palindrome subString
# It also returns the length
# of the longest palindrome
def longestPalSubstr(str):
 
    # Get length of input String
    n = len(str)
 
    # All subStrings of length 1
    # are palindromes
    maxLength = 1
    start = 0
 
    # Nested loop to mark start
    # and end index
    for i in range(n):
        for j in range(i, n):
            flag = 1
 
            # Check palindrome
            for k in range(0, ((j - i) // 2) + 1):
                if (str[i + k] != str[j - k]):
                    flag = 0
 
            # Palindrome
            if (flag != 0 and (j - i + 1) > maxLength):
                start = i
                maxLength = j - i + 1
 
    print("Longest palindrome substring is: ", end="")
    printSubStr(str, start, start + maxLength - 1)
 
    # Return length of LPS
    return maxLength
 
 
# Driver Code
if __name__ == '__main__':
 
    str = "aaatcggtacga"
    print("\nLength is:", longestPalSubstr(str))
